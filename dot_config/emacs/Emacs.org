#+title: @bevsxyz's Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :mkdirp yes

I had started my Emacs journey with the [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]] series by [[https://github.com/daviwil][@daviwil]]. I had used his configuration and built my own Emacs
configuration largely copying from his [[https://github.com/daviwil/emacs-from-scratch][EFS repo]]. Well now I think I have graduated having done my exploration of Emacs, and would like
to write my very own configuration, customised to my liking.  And that's what I am gonna do. Satisfying my inner control freak!!! Yaay!!!

* Initialize My Configuration

Let us begin by setting some variables that we will be using further in the configuration. Perhaps I will use this block religiously to declare all
of the variables to configure my setup or not depending on how much I crave for clean code. Let us hope I stick to my code cleaning monthly at the very least.

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  (defvar bevsxyz/default-font-size 200)
  (defvar bevsxyz/default-variable-font-size 200)
  (defvar bevsxyz/frame-transparency '(90 . 90))

#+end_src

** Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun bevsxyz/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'bevsxyz/display-startup-time)

#+end_src

** Package Manager for Emacs!!

I have used [[https://github.com/jwiegley/use-package][use-package]] for a while now and loved it. It is neat and tidy. I came across [[https://github.com/radian-software/straight.el][Straight.el]] recently and oh boy does it live upto it's
description. And what's more I can retain my previous use-package declarations without much change and make it use straight underneath instead of the default package.el. I am impressed!

First, let us get into bootstrapping the straight package manger for our emacs.

#+begin_src emacs-lisp

  ;(setq package-enable-at-startup nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+end_src

Since I am gonna use `use-package`, we will have to install it with `straight.el` and initialize it.

#+begin_src emacs-lisp

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (use-package async)

#+end_src

** Automatic Package Updates

The [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] package helps to keep our Emacs package up to date independent of straight.el. I am not happy with the start-up
times of straight.el. This had worked with use-package alone previously and ought to work. Let us say this is still a testing issue.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

;  (setq straight-check-for-modifications nil)

;  (use-package auto-package-update
;    :custom
;    (auto-package-update-interval 7)
;    (auto-package-update-prompt-before-update t)
;    (auto-package-update-hide-results t)
;    :config
;    (auto-package-update-maybe)
;    (auto-package-update-at-time "09:00"))

#+end_src

**  Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering
    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    :custom (auto-save-file-name-transforms
             `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

#+end_src

** Basic User Interface

We will configure the minimal UI setting retaining stuff I want and removing other bloats. Un-comment the =(menu-bar-mode -1)= if you fancy removing the menu bar.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

                                          ;(menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell nil)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha bevsxyz/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,bevsxyz/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

    (set-face-attribute 'default nil
                        :font "Fira Code Retina"
                        :height bevsxyz/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil
                        :font "Fira Code Retina"
                        :height bevsxyz/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil
                        :font "Cantarell"
                        :height bevsxyz/default-variable-font-size
                        :weight 'regular)

#+end_src

** Extended User Interface

*** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :config (load-theme 'doom-city-lights t))

#+end_src

*** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

*** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

*** Better Undo

Sane undo with [[https://codeberg.org/ideasman42/emacs-undo-fu][undo-fu]].

#+begin_src emacs-lisp

  (use-package undo-fu) 
#+end_src

**** Across Sessions

[[https://codeberg.com/ideasman42/emacs-undo-fu-session][undo-fu-session]] is a better emacs undo package with the session data written to disk. Hence the undo history is available across sessions.

#+begin_src emacs-lisp

  (use-package undo-fu-session
    :custom
    (undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

  (global-undo-fu-session-mode)
  
#+end_src

*** Completions

#+begin_src emacs-lisp

  (use-package vertico
    :custom
    (vertico-cycle t)
    :bind (:map vertico-map
                ("<tab>" . vertico-insert)
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("<escape>" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
  (use-package corfu
    :init
    (global-corfu-mode))

#+end_src

#+begin_src emacs-lisp

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
  
#+end_src

*** Practical Completion Commands

[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command consult-buffer to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous consult-grep and consult-ripgrep, and the line-based search command consult-line. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command consult-imenu presents a flat list of the Imenu with live preview, grouping and narrowing. Please take a look at the full list of commands.

#+begin_src emacs-lisp

  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
  
#+end_src

*** Commands at point

[[https://github.com/oantolin/embark][Embark]] makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers. Bind the command embark-act to a key and it acts like prefix-key for a keymap of actions (commands) relevant to the target around point. With point on an URL in a buffer you can open the URL in a browser or eww or download the file it points to. If while switching buffers you spot an old one, you can kill it right there and continue to select another. Embark comes preconfigured with over a hundred actions for common types of targets such as files, buffers, identifiers, s-expressions, sentences; and it is easy to add more actions and more target types. Embark can also collect all the candidates in a minibuffer to an occur-like buffer or export them to a buffer in a major-mode specific to the type of candidates, such as dired for a set of files, ibuffer for a set of buffers, or customize for a set of variables.

#+begin_src emacs-lisp

(use-package embark

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :custom

  ;; Optionally replace the key help with a completing-read interface
  ( prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
  
#+end_src

* Key Board Short Cuts

** Set-up Packages

*** General.el

[[https://github.com/noctuid/general.el][General.el]] is used for easy keybinding configuration that integrates well with which-key.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer bevsxyz/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (bevsxyz/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive)
               (find-file (expand-file-name "~/.local/share/chezmoi/dot_config/emacs/Emacs.org")))))

#+end_src

*** Evil-mode

[[https://evil.readthedocs.io/en/latest/index.html][Evil-mode]] for a Vi-like modal editing experience.

#+begin_src emacs-lisp

  (use-package evil
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump nil)
    (evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

*** Evil-collection

[[https://github.com/emacs-evil/evil-collection][Evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src




* Development

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ido))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Formatting

#+begin_src emacs-lisp

  (use-package apheleia
    :init (apheleia-global-mode +1))

#+end_src

* Organizing with Org

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Configuration

Well all of the org configurations
*** Basic
The =bevsxyz/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun bevsxyz/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :font "Cantarell"
                          :weight 'regular
                          :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil
                        :foreground nil
                        :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil
                        :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil
                        :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil
                        :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil
                        :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil
                        :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil
                        :inherit 'fixed-pitch)
    (set-face-attribute 'line-number t
                        :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil
                        :inherit 'fixed-pitch))

#+end_src

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun bevsxyz/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . bevsxyz/org-mode-setup)
    :custom
    (org-ellipsis " ▾")
    :config
    (bevsxyz/org-font-setup))

#+end_src

*** Extended UI Settings
**** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

**** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun bevsxyz/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . bevsxyz/org-mode-visual-fill))

#+end_src

*** Code Blocks
**** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

**** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

**** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =bevsxyz/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun bevsxyz/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (concat "/home/" user-real-login-name "/.local/share/chezmoi/dot_config/emacs/"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'bevsxyz/org-babel-tangle-config)))

#+end_src

**** Auto Indent

#+begin_src emacs-lisp

  ;; Auto Indent
  (setq org-src-tab-acts-natively t)

#+end_src

** My Second Brain

[[https://github.com/org-roam/org-roam][Org-roam]] is a org extension to create and manage a second brain. I need to use it to extend my memory!

*** Configuration
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/projects/org-roam")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-directory "journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\nMood: %^{Mood}\n\n")
        )))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t))
     '(("p" "project" plain (file "~/projects/org-roam/templates/ProjectNoteTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
    )
#+end_src

*** Org-roam-bibtex

#+begin_quote
[[https://github.com/org-roam/org-roam-bibtex][Org Roam BibTeX (ORB)]] is an Org Roam extension that integrates Org Roam with bibliography/citation management software: Org Ref, Helm and Ivy BibTeX and Citar.

It allows users to manage their bibliographical notes using Org Roam and access the notes in org-roam-directory via helm-bibtex, ivy-bibtex, citar-open-notes or by activation Org-ref cite: links and Org-cite citations.
#+end_quote

#+Begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after org-roam)
#+end_src

*** Custom Functions

Some custom function I have stolen from [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][systemcrafters]].

**** Org Agenda

List roam project files with TODO in the org-agenda list of files.

#+begin_src emacs-lisp

  (require 'org-roam)
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))


  (defun bevsxyz/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (lambda (node) (string-equal (nth 0 (org-roam-node-tags node)) tag-name))
             (org-roam-node-list))))
  (defun bevsxyz/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (bevsxyz/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
  (bevsxyz/org-roam-refresh-agenda-list)

#+end_src

**** Custom Project Find Function

#+begin_src emacs-lisp
  (defun bevsxyz/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'bevsxyz/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun bevsxyz/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'bevsxyz/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (bevsxyz/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain  (file "~/projects/org-roam/templates/ProjectNoteTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))

  (global-set-key (kbd "C-c n p") #'bevsxyz/org-roam-find-project)
#+end_src

**** Inbox

Capture notes in a single org file for all the spontaneous ideas which later can be refiled.

#+begin_src emacs-lisp
  (defun bevsxyz/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "* %?"
                                    :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

  (global-set-key (kbd "C-c n b") #'bevsxyz/org-roam-capture-inbox)
#+end_src

**** Capture Tasks to Project

#+begin_src emacs-lisp
  (defun bevsxyz/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'bevsxyz/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (bevsxyz/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "** TODO %?"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                            ("Tasks"))))))
#+end_src

**** Automatically copy (or move) completed tasks to dailies

#+begin_src emacs-lisp
  (defun bevsxyz/org-roam-copy-todo-to-today ()
    (interactive)
    (let ((org-refile-keep t) ;; Set this to nil to delete the original!
          (org-roam-dailies-capture-templates
           '(("t" "tasks" entry "%?"
              :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
          (org-after-refile-insert-hook #'save-buffer)
          today-file
          pos)
      (save-window-excursion
        (org-roam-dailies--capture (current-time) t)
        (setq today-file (buffer-file-name))
        (setq pos (point)))

      ;; Only refile if the target file is different than the current file
      (unless (equal (file-truename today-file)
                     (file-truename (buffer-file-name)))
        (org-refile nil nil (list "Tasks" today-file nil pos)))))

  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "DONE")
                   (bevsxyz/org-roam-copy-todo-to-today))))
#+end_src

** Reference Citations

We will use [[https://github.com/jkitchin/org-ref][org-ref]] for reference management.

#+begin_src emacs-lisp

  (use-package org-ref
    :straight (org-ref :type git :host github :repo "jkitchin/org-ref")
    :bind (:map org-mode-map ("C-c ]" . org-ref-insert-link-hydra/body)
                :map bibtex-mode-map ("C-c ]" . org-ref-insert-link-hydra/body)))

#+end_src

Set up bibtex

#+begin_src emacs-lisp
  (setq bevsxyz/bib-dir '("~/projects/org-roam/bibliography/references.bib"
                                                "~/projects/org-roam/bibliography/dei.bib"
                                                "~/projects/org-roam/bibliography/master.bib"
                                                "~/projects/org-roam/bibliography/archive.bib"))
  (use-package bibtex
    :init (setq bibtex-completion-bibliography bevsxyz/bib-dir
                                              bibtex-completion-library-path
                                              '("~/projects/org-roam/bibliography/bibtex-pdfs/")
                                              bibtex-completion-notes-path
                                              "~/projects/org-roam/bibliography/notes/")
      :custom
      ( bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
                                                        bibtex-completion-additional-search-fields '(keywords)
                                                        bibtex-completion-display-formats
                                                        '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
                                                          (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
                                                          (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
                                                          (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
                                                          (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
                                                        bibtex-completion-pdf-open-function
                                                        (lambda (fpath)
                                                          (eaf-open fpath))
                                                        bibtex-autokey-year-length 4
                                                        bibtex-autokey-name-year-separator "-"
                                                        bibtex-autokey-year-title-separator "-"
                                                        bibtex-autokey-titleword-separator "-"
                                                        bibtex-autokey-titlewords 2
                                                        bibtex-autokey-titlewords-stretch 1
                                                        bibtex-autokey-titleword-length 5))

#+end_src

#+begin_src emacs-lisp

  (use-package citar
    :no-require
    :custom
    (org-cite-global-bibliography bevsxyz/bib-dir)
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    (citar-at-point-function 'embark-act)
    (citar-file-parser-functions
     '(citar-file-parser-default
       citar-file-parser-triplet))
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

#+end_src

* Applications

Some special use applications inside emacs are configured here.

** EAF

[[https://github.com/emacs-eaf/emacs-application-framework][Emacs Application Framework]] extends the graphical capabilities of emacs utilising Qt6. It has a number of applications, but we will only use the browser and the pdf reader.

#+begin_src emacs-lisp

  (use-package eaf
    :straight (eaf
               :type git
               :host github
               :repo "emacs-eaf/emacs-application-framework"           
               :files ("*.el" "*.py" "core" "app" "*.json" "extension")
               :includes (eaf-pdf-viewer eaf-browser eaf-interleave)
               :pre-build (("python" "install-eaf.py" "--install" "pdf-viewer" "browser" "--ignore-sys-deps"))
               )
    :init (evil-set-initial-state 'eaf-mode 'emacs))

#+end_src

*** Browser

#+begin_src emacs-lisp

  (use-package eaf-browser
    :custom
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t))

#+end_src

*** PDF Viewer

#+begin_src emacs-lisp

  (use-package eaf-pdf-viewer)

#+end_src

*** PDF Notes

#+begin_src emacs-lisp

  (use-package eaf-interleave)
  
#+end_src

** epub Reader

#+begin_src emacs-lisp

    ;(use-package nov
     ; :init (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
      ;:hook (visual-line-mode visual-fill-column-mode))

#+end_src

** Terminal


[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :custom
    (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (vterm-max-scrollback 10000))

#+end_src

